{"version":3,"sources":["Components/TextBox.js","Components/Attacks.js","Components/Avatar.js","Components/EnemyBox.js","Components/PlayerBox.js","Components/PlayAgain.js","App.js","index.js"],"names":["TextBox","className","this","props","messageOne","messageTwo","Component","Attacks","cost","details","name","damage","onClick","handleAttackClick","manaCost","Avatar","faint","undefined","animation","src","process","logoName","alt","EnemyBox","progressColor","percentage","enemyHP","enemyMaxHP","num","id","enemyName","enemyLevel","role","style","width","aria-valuenow","aria-valuemin","aria-valuemax","enemyFaint","PlayerBox","playerHP","playerMaxHP","playerName","playerLevel","playerFaint","toLowerCase","PlayAgain","handlePlayAgain","App","startingSequence","setTimeout","setState","textMessageOne","state","enemy","players","i","length","enemyTurn","enemyAttackName","enemyAttackDamage","Math","floor","random","hp","textMessageTwo","gameOver","prevState","enemyAttack","attackDamages","attackNames","maxHp","level","attacks","_","map","player","key","Object","keys","index","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10b93455.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass TextBox extends Component {\n  render() {\n    return (\n      <div className=\"battle-text-content\">\n        <p>\n          {this.props.messageOne} <br /> {this.props.messageTwo}\n        </p>\n      </div>\n    );\n  }\n}\n\nTextBox.propTypes = {\n  messageOne: PropTypes.string,\n  messageTwo: PropTypes.string,\n}\n\nexport default TextBox;\n","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Attacks extends Component {\r\n  manaCost(cost) {\r\n    return cost === 0 ? null : `(${cost} mana)`;\r\n  }\r\n  render() {\r\n    const { name, damage, cost } = this.props.details;\r\n    return (\r\n      <div className=\"attack-container\">\r\n        <div>\r\n          <span className=\"move-pointer\" onClick={() => this.props.handleAttackClick(name, damage)}>\r\n            {name} <span className=\"small\">{this.manaCost(cost)}</span>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nAttacks.propTypes = {\r\n  detail: PropTypes.shape({\r\n    name: PropTypes.string,\r\n    damage: PropTypes.number\r\n  }),\r\n  handleAttackClick: PropTypes.func,\r\n}\r\n\r\nexport default Attacks;\r\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Avatar extends Component {\n  animation() {\n    const { faint } = this.props;\n\n    if (faint === true) {\n      return \"animated fadeOut slow\";\n    }\n    if (faint === false) {\n      return \"animated fadeInUp\";\n    }\n    if (faint === undefined) {\n      return \"hide\";\n    }\n  }\n\n  render() {\n    return (\n      <div className={this.animation()}>\n        <img className={this.props.className} src={process.env.PUBLIC_URL+\"/img/\"+this.props.logoName+\".png\"} alt={this.props.logoName} />\n      </div>\n    );\n  }\n}\n\nAvatar.propTypes = {\n  faint: PropTypes.bool,\n  logoName: PropTypes.string,\n  className: PropTypes.string,\n}\n\nexport default Avatar;\n","import React, { Component } from \"react\";\nimport Avatar from \"./Avatar\";\n\nexport class EnemyBox extends Component {\n  render() {\n    // calc enemy progress bar percentage based on HP\n    let percentage = (this.props.enemyHP / this.props.enemyMaxHP) * 100 + \"%\";\n    let num = (this.props.enemyHP / this.props.enemyMaxHP) * 100;\n    let progressColor;\n\n    // use enemy progress bar calc to style colors\n    if (num <= 25) {\n      progressColor = \"progress-bar bg-danger\";\n    } else if (num <= 50) {\n      progressColor = \"progress-bar bg-warning\";\n    } else if (num > 50) {\n      progressColor = \"progress-bar bg-success\";\n    }\n    return (\n      <div id=\"enemy-container\">\n        {/* ENEMY POKEMON INFO BOX */}\n        <div id=\"enemy-info-box\">\n          <div className=\"d-flex justify-content-between align-items-center\">\n            <h2 id=\"enemy-name\">{this.props.enemyName}</h2>\n            <h5 className=\"mr-1 d-none d-sm-block\">\n              Lv\n              {this.props.enemyLevel}\n            </h5>\n          </div>\n          <div className=\"d-flex justify-content-between align-items-center ml-3 mr-1\">\n            <h5>PV</h5>\n            <div className=\"progress ml-1 both-progress\">\n              <div\n                className={progressColor}\n                role=\"progressbar\"\n                style={{ width: percentage }}\n                aria-valuenow=\"75\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n              />\n            </div>\n          </div>\n        </div>\n        {/* END ENEMY POKEMON INFO BOX */}\n\n        {/* ENEMY POKEMON AVATAR PICTURE */}\n        <div className=\"mr-sm-4 avatar-box\">\n          <Avatar faint={this.props.enemyFaint} logoName=\"mewtwo\" className=\"avatar mr-3 mt-4\" />\n\n          <div className=\"oval\" />\n        </div>\n        {/* END ENEMY POKEMON AVATAR PICTURE */}\n      </div>\n    );\n  }\n}\n\nexport default EnemyBox;\n","import React, { Component } from \"react\";\nimport Avatar from \"./Avatar\";\n\nexport class PlayerBox extends Component {\n  render() {\n    // calc player progress bar percentage based on HP\n    let percentage = (this.props.playerHP / this.props.playerMaxHP) * 100 + \"%\";\n    let num = (this.props.playerHP / this.props.playerMaxHP) * 100;\n    let progressColor;\n\n    // use player progress bar calc to style colors\n    if (num <= 25) {\n      progressColor = \"progress-bar bg-danger\";\n    } else if (num <= 50) {\n      progressColor = \"progress-bar bg-warning\";\n    } else if (num > 50) {\n      progressColor = \"progress-bar bg-success\";\n    }\n    return (\n      <div id=\"hero-container\">\n        {/* HERO POKEMON INFO BOX */}\n        <div id=\"hero-info-box\">\n          <div className=\"d-flex justify-content-between align-items-center\">\n            <h2 id=\"hero-name\">{this.props.playerName}</h2>\n            <h5 className=\"mr-1 d-none d-sm-block\">\n              Lv\n              {this.props.playerLevel}\n            </h5>\n          </div>\n          <div className=\"d-flex justify-content-between align-items-center ml-3 mr-1\">\n            <h5>PV</h5>\n            <div className=\"progress ml-1 both-progress\">\n              <div\n                className={progressColor}\n                role=\"progressbar\"\n                style={{ width: percentage }}\n                aria-valuenow=\"75\"\n                aria-valuemin=\"0\"\n                aria-valuemax=\"100\"\n              />\n            </div>\n          </div>\n          <div id=\"hero-hp\" className=\"d-flex\">\n            <div className=\"ml-auto mr-3\">\n              <h5>\n                {this.props.playerHP}/{this.props.playerMaxHP}\n              </h5>\n            </div>\n          </div>\n        </div>\n        {/* END HERO POKEMON INFO BOX */}\n\n        {/* HERO POKEMON AVATAR PICTURE */}\n        <div className=\"mr-sm-4 avatar-box\">\n          <Avatar faint={this.props.playerFaint} logoName={this.props.playerName.toLowerCase()} className=\"avatar mr-3 mt-4\" />\n\n          <div className=\"oval\" />\n        </div>\n        {/* END HERO POKEMON AVATAR PICTURE */}\n      </div>\n    );\n  }\n}\n\nexport default PlayerBox;\n","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nclass PlayAgain extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"battle-text-content\">\r\n        <p id=\"play-again-text\" onClick={() => this.props.handlePlayAgain()}>\r\n          Clique ici pour recommencer une partie\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPlayAgain.propTypes = {\r\n  handlePlayAgain: PropTypes.func,\r\n}\r\n\r\nexport default PlayAgain;\r\n","import React, { Component } from 'react';\nimport \"./animate.css\";\nimport \"./bootstrap.css\";\nimport \"./App.css\";\nimport TextBox from \"./Components/TextBox\";\nimport Attacks from \"./Components/Attacks\";\nimport EnemyBox from \"./Components/EnemyBox\";\nimport PlayerBox from \"./Components/PlayerBox\";\nimport PlayAgain from \"./Components/PlayAgain\";\nimport _ from 'lodash';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      players: [\n        {\n          name: \"Pikachu\",\n          level: 45,\n          hp: 200,\n          maxHp: 200,\n          faint: undefined,\n          attacks: [\n            { name: \"Morsure\", damage: 10, cost: 0 },\n            { name: \"Eclair\", damage: 30, cost: 10 },\n            { name: \"Tonnerre\", damage: 35, cost: 20 },\n            { name: \"Méga éclair\", damage: 45, cost: 30 },\n          ],\n        },\n        {\n          name: \"Emolga\",\n          level: 45,\n          hp: 200,\n          maxHp: 200,\n          faint: undefined,\n          attacks: [\n            { name: \"Morsure\", damage: 10, cost: 0 },\n            { name: \"Eclair\", damage: 30, cost: 10 },\n            { name: \"Tonnerre\", damage: 35, cost: 20 },\n            { name: \"Méga éclair\", damage: 45, cost: 30 },\n          ],\n        },\n        {\n          name: \"Teddiursa\",\n          level: 45,\n          hp: 200,\n          maxHp: 200,\n          faint: undefined,\n          attacks: [\n            { name: \"Morsure\", damage: 10, cost: 0 },\n            { name: \"Eclair\", damage: 30, cost: 10 },\n            { name: \"Tonnerre\", damage: 35, cost: 20 },\n            { name: \"Méga éclair\", damage: 45, cost: 30 },\n          ],\n        },\n        {\n          name: \"Togepi\",\n          level: 45,\n          hp: 200,\n          maxHp: 200,\n          faint: undefined,\n          attacks: [\n            { name: \"Morsure\", damage: 10, cost: 0 },\n            { name: \"Eclair\", damage: 30, cost: 10 },\n            { name: \"Tonnerre\", damage: 35, cost: 20 },\n            { name: \"Méga éclair\", damage: 45, cost: 30 },\n          ],\n        }\n      ],\n      enemy: {\n        name: \"Mewtwo\",\n        level: 43,\n        hp: 200,\n        maxHp: 200,\n        faint: undefined,\n        attackNames: [\"Frappe\", \"Balle de l'ombre\", \"Rêve éveillé\", \"Cauchemard\"],\n        attackDamages: [10, 30, 35, 45],\n      },\n      // playerName: \"Pikachu\",\n      // playerLevel: 45,\n      // playerHP: 200,\n      // playerMaxHP: 200,\n      // playerFaint: undefined,\n      // playerAttacks: {\n      //   attackOne: { name: \"Morsure\", damage: 10, cost: 0 },\n      //   attackTwo: { name: \"Eclair\", damage: 30, cost: 10 },\n      //   attackThree: { name: \"Tonnerre\", damage: 35, cost: 20 },\n      //   attackFour: { name: \"Méga éclair\", damage: 45, cost: 30 }\n      // },\n      // enemyName: \"Mewtwo\",\n      // enemyLevel: 43,\n      // enemyHP: 200,\n      // enemyMaxHP: 200,\n      // enemyAttackNames: [\"Frappe\", \"Balle de l'ombre\", \"Rêve éveillé\", \"Cauchemard\"],\n      // enemyAttackDamage: [10, 30, 35, 45],\n      // enemyFaint: undefined,\n      textMessageOne: \" \",\n      textMessageTwo: \"\",\n      gameOver: false\n    };\n  }\n\n  componentDidMount() {\n    this.startingSequence();\n  }\n\n  startingSequence = () => {\n    setTimeout(() => {\n      this.setState(\n        () => {\n          return {\n            textMessageOne: `${this.state.enemy.name} apparait!`,\n            enemy: {\n              ...this.state.enemy,\n              faint: false,\n            },\n          };\n        },\n        () => {\n          setTimeout(() => {\n            const players = [...this.state.players];\n            for (let i = 0; i < this.state.players.length; i++) {\n              players[i] = { ...players[i], faint: false };\n            }\n\n            this.setState(\n              {\n                textMessageOne: \"Vous entrez pour le combattre !\",\n                players\n              },\n              () => {\n                setTimeout(() => {\n                  this.setState({\n                    textMessageOne: \"\"\n                  });\n                }, 3000);\n              }\n            );\n          }, 3000);\n        }\n      );\n    }, 1000);\n  };\n\n  enemyTurn = (enemyAttackName, enemyAttackDamage) => {\n    enemyAttackDamage = enemyAttackDamage + Math.floor(Math.random() * 11);\n    // first, check if enemy fainted. End Game if they did.\n    if (this.state.enemy.hp === 0) {\n      this.setState(\n        {\n          textMessageOne: `${this.state.enemy.name} a perdu.`,\n          textMessageTwo: `Vous avez gagné!`,\n          enemy: {\n            ...this.state.enemy,\n            faint: true,\n          },\n        },\n        () => {\n          setTimeout(() => {\n            this.setState({\n              gameOver: true\n            });\n          }, 3000);\n        }\n      );\n    } else {\n      // if enemy is still alive, proceed with enemy turn\n      this.setState(\n        prevState => {\n          const players = [...this.state.players];\n\n          if (prevState.players[0].hp - enemyAttackDamage <= 0) {\n            players[0] = { ...players[0], hp: 0 };\n            return {\n              players,\n              textMessageOne: `${\n                this.state.enemy.name\n              } utilise ${enemyAttackName} pour ${enemyAttackDamage}pts de dégats!`\n            };\n          } else {\n            players[0] = { ...players[0], hp: prevState.players[0].hp - enemyAttackDamage };\n            return {\n              players,\n              textMessageOne: `${\n                this.state.enemy.name\n              } utilise ${enemyAttackName} pour ${enemyAttackDamage}pts de dégats!`\n            };\n          }\n        },\n        () => {\n          setTimeout(() => {\n            if (this.state.players[0].hp === 0) {\n              const players = [...this.state.players];\n              players[0] = { ...players[0], faint: true };\n\n              this.setState(\n                {\n                  textMessageOne: `${this.state.players[0].name} a perdu.`,\n                  textMessageTwo: `${this.state.enemy.name} a gagné!`,\n                  players\n                },\n                () => {\n                  setTimeout(() => {\n                    this.setState({\n                      gameOver: true\n                    });\n                  }, 3000);\n                }\n              );\n            } else {\n              this.setState({\n                textMessageOne: \"\"\n              });\n            }\n          }, 2000);\n        }\n      );\n    }\n  };\n\n  handleAttackClick = (name, damage) => {\n    damage = damage + Math.floor(Math.random() * 11);\n\n    // use attack to calculate enemy HP and adjust progress bar\n    this.setState(\n      prevState => {\n        if (prevState.enemy.hp - damage <= 0) {\n          return {\n            enemy: {\n              ...this.state.enemy,\n              hp: 0,\n            },\n            textMessageOne: `${\n              this.state.players[0].name\n            } utilise ${name} pour ${damage}pts de dégats!`\n          };\n        } else {\n          return {\n            enemy: {\n              ...this.state.enemy,\n              hp: prevState.enemy.hp - damage,\n            },\n            textMessageOne: `${\n              this.state.players[0].name\n            } utilise ${name} pour ${damage}pts de dégats!`\n          };\n        }\n      },\n      () => {\n        // wait X seconds before enemy attacks\n        setTimeout(() => {\n          // calc next enemy attack name and damage\n          let enemyAttack = Math.floor(Math.random() * 4);\n          let enemyAttackDamage = this.state.enemy.attackDamages[enemyAttack];\n          let enemyAttackName = this.state.enemy.attackNames[enemyAttack];\n\n          // once the state is changed, start enemy turn\n          this.enemyTurn(enemyAttackName, enemyAttackDamage);\n        }, 3000);\n      }\n    );\n  };\n\n  handlePlayAgain = () => {\n    const players = [...this.state.players];\n    for (let i = 0; i < this.state.players.length; i++) {\n      players[i] = { ...players[i], faint: false, hp: this.state.players[i].maxHp };\n    }\n\n    this.setState({\n      enemy: {\n        ...this.state.enemy,\n        hp: this.state.enemy.maxHp,\n        faint: false,\n      },\n      gameOver: false,\n      textMessageOne: \"\",\n      textMessageTwo: \"\",\n      players\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container h-100\">\n        <div className=\"row row h-100 justify-content-center align-items-center\">\n          <div className=\"col-sm-12\">\n            {/* BATTLE SCREEN CONTAINER */}\n            <div id=\"battle-container\" className=\"px-2 mx-auto\">\n\n              <div className=\"all-players-box\">\n                <EnemyBox\n                  enemyName={this.state.enemy.name}\n                  enemyLevel={this.state.enemy.level}\n                  enemyHP={this.state.enemy.hp}\n                  enemyMaxHP={this.state.enemy.maxHp}\n                  enemyFaint={this.state.enemy.faint}\n                />\n\n                {_.map(this.state.players, player => (\n                  <PlayerBox\n                    key={player.name}\n                    playerName={player.name}\n                    playerLevel={player.level}\n                    playerHP={player.hp}\n                    playerMaxHP={player.maxHp}\n                    playerFaint={player.faint}\n                  />\n                ))}\n              </div>\n\n              {/* TEXT BOX SECTION */}\n              <div id=\"text-box\">\n                <div id=\"text-box-content\">\n                  {this.state.textMessageOne !== \"\" &&\n                  this.state.gameOver === false && (\n                    <TextBox\n                      messageOne={this.state.textMessageOne}\n                      messageTwo={this.state.textMessageTwo}\n                    />\n                  )}\n\n                  {this.state.textMessageOne === \"\" &&\n                  this.state.gameOver === false &&\n                  Object.keys(this.state.players[0].attacks).map((key, index) => {\n                    return (\n                      <Attacks\n                        key={key}\n                        index={index}\n                        details={this.state.players[0].attacks[key]}\n                        handleAttackClick={this.handleAttackClick}\n                      />\n                    );\n                  })}\n\n                  {this.state.gameOver === true && (\n                    <PlayAgain handlePlayAgain={this.handlePlayAgain} />\n                  )}\n                </div>\n              </div>\n              {/* END TEXT BOX SECTION */}\n            </div>\n            {/* END BATTLE SCREEN CONTAINER */}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}