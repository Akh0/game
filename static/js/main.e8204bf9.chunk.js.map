{"version":3,"sources":["Components/TextBox.js","Components/Attacks.js","Components/Avatar.js","Components/EnemyBox.js","Components/PlayerBox.js","Components/PlayAgain.js","App.js","index.js"],"names":["TextBox","className","this","props","messageOne","messageTwo","Component","Attacks","cost","details","name","damage","onClick","handleAttackClick","manaCost","Avatar","faint","undefined","animation","src","process","logoName","alt","EnemyBox","progressColor","percentage","enemyHP","enemyMaxHP","num","id","enemyName","enemyLevel","role","style","width","aria-valuenow","aria-valuemin","aria-valuemax","enemyFaint","PlayerBox","playerHP","playerMaxHP","playerFaint","playerName","playerLevel","PlayAgain","handlePlayAgain","App","state","playerAttacks","attackOne","attackTwo","attackThree","attackFour","enemyAttackNames","enemyAttackDamage","textMessageOne","textMessageTwo","gameOver","startingSequence","setTimeout","setState","enemyTurn","enemyAttackName","Math","floor","random","prevState","enemyAttack","Object","keys","map","key","index","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e8204bf9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass TextBox extends Component {\n  render() {\n    return (\n      <div className=\"battle-text-content\">\n        <p>\n          {this.props.messageOne} <br /> {this.props.messageTwo}\n        </p>\n      </div>\n    );\n  }\n}\n\nTextBox.propTypes = {\n  messageOne: PropTypes.string,\n  messageTwo: PropTypes.string,\n}\n\nexport default TextBox;\n","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Attacks extends Component {\r\n  manaCost(cost) {\r\n    return cost === 0 ? null : `(${cost} mana)`;\r\n  }\r\n  render() {\r\n    const { name, damage, cost } = this.props.details;\r\n    return (\r\n      <div className=\"attack-container\">\r\n        <div>\r\n          <span className=\"move-pointer\" onClick={() => this.props.handleAttackClick(name, damage)}>\r\n            {name} <span className=\"small\">{this.manaCost(cost)}</span>\r\n          </span>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nAttacks.propTypes = {\r\n  detail: PropTypes.shape({\r\n    name: PropTypes.string,\r\n    damage: PropTypes.number\r\n  }),\r\n  handleAttackClick: PropTypes.func,\r\n}\r\n\r\nexport default Attacks;\r\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nclass Avatar extends Component {\n  animation() {\n    const { faint } = this.props;\n\n    if (faint === true) {\n      return \"animated fadeOut slow\";\n    }\n    if (faint === false) {\n      return \"animated fadeInUp\";\n    }\n    if (faint === undefined) {\n      return \"hide\";\n    }\n  }\n\n  render() {\n    return (\n      <div className={this.animation()}>\n        <img className={this.props.className} src={process.env.PUBLIC_URL+\"/img/\"+this.props.logoName+\".png\"} alt={this.props.logoName} />\n      </div>\n    );\n  }\n}\n\nAvatar.propTypes = {\n  faint: PropTypes.bool,\n  logoName: PropTypes.string,\n  className: PropTypes.string,\n}\n\nexport default Avatar;\n","import React, { Component } from \"react\";\nimport Avatar from \"./Avatar\";\n\nexport class EnemyBox extends Component {\n  render() {\n    // calc enemy progress bar percentage based on HP\n    let percentage = (this.props.enemyHP / this.props.enemyMaxHP) * 100 + \"%\";\n    let num = (this.props.enemyHP / this.props.enemyMaxHP) * 100;\n    let progressColor;\n\n    // use enemy progress bar calc to style colors\n    if (num <= 25) {\n      progressColor = \"progress-bar bg-danger\";\n    } else if (num <= 50) {\n      progressColor = \"progress-bar bg-warning\";\n    } else if (num > 50) {\n      progressColor = \"progress-bar bg-success\";\n    }\n    return (\n      <div>\n        {/* ENEMY POKEMON CONTAINER */}\n        <div id=\"enemy-container\">\n          {/* ENEMY POKEMON INFO BOX */}\n          <div id=\"enemy-info-box\">\n            <div className=\"d-flex justify-content-between align-items-center\">\n              <h2 id=\"enemy-name\">{this.props.enemyName}</h2>\n              <h5 className=\"mr-1 d-none d-sm-block\">\n                Lv\n                {this.props.enemyLevel}\n              </h5>\n            </div>\n            <div className=\"d-flex justify-content-between align-items-center ml-3 mr-1\">\n              <h5>PV</h5>\n              <div className=\"progress ml-1 both-progress\">\n                <div\n                  className={progressColor}\n                  role=\"progressbar\"\n                  style={{ width: percentage }}\n                  aria-valuenow=\"75\"\n                  aria-valuemin=\"0\"\n                  aria-valuemax=\"100\"\n                />\n              </div>\n            </div>\n          </div>\n          {/* END ENEMY POKEMON INFO BOX */}\n\n          {/* ENEMY POKEMON AVATAR PICTURE */}\n          <div className=\"mr-sm-4 avatar-box\">\n            <Avatar faint={this.props.enemyFaint} logoName=\"mewtwo\" className=\"avatar mr-3 mt-4\" />\n\n            <div className=\"oval\" />\n          </div>\n          {/* END ENEMY POKEMON AVATAR PICTURE */}\n        </div>\n        {/* END ENEMY POKEMON CONTAINER */}\n      </div>\n    );\n  }\n}\n\nexport default EnemyBox;\n","import React, { Component } from \"react\";\nimport Avatar from \"./Avatar\";\n\nexport class PlayerBox extends Component {\n  render() {\n    // calc player progress bar percentage based on HP\n    let percentage = (this.props.playerHP / this.props.playerMaxHP) * 100 + \"%\";\n    let num = (this.props.playerHP / this.props.playerMaxHP) * 100;\n    let progressColor;\n\n    // use player progress bar calc to style colors\n    if (num <= 25) {\n      progressColor = \"progress-bar bg-danger\";\n    } else if (num <= 50) {\n      progressColor = \"progress-bar bg-warning\";\n    } else if (num > 50) {\n      progressColor = \"progress-bar bg-success\";\n    }\n    return (\n      <div>\n        {/* HERO POKEMON CONTAINER */}\n        <div id=\"hero-container\">\n          {/* HERO POKEMON AVATAR PICTURE */}\n          <div className=\"avatar-box ml-sm-5\">\n            <Avatar faint={this.props.playerFaint} logoName=\"pikachu\" className=\"avatar mt-sm-2\" />\n\n            <div className=\"oval\" />\n          </div>\n          {/* END HERO POKEMON AVATAR PICTURE */}\n\n          {/* HERO POKEMON INFO BOX */}\n          <div id=\"hero-info-box\">\n            <div className=\"d-flex justify-content-between align-items-center\">\n              <h2 id=\"hero-name\">{this.props.playerName}</h2>\n              <h5 className=\"mr-1 d-none d-sm-block\">\n                Lv\n                {this.props.playerLevel}\n              </h5>\n            </div>\n            <div className=\"d-flex justify-content-between align-items-center ml-3 mr-1\">\n              <h5>PV</h5>\n              <div className=\"progress ml-1 both-progress\">\n                <div\n                  className={progressColor}\n                  role=\"progressbar\"\n                  style={{ width: percentage }}\n                  aria-valuenow=\"75\"\n                  aria-valuemin=\"0\"\n                  aria-valuemax=\"100\"\n                />\n              </div>\n            </div>\n            <div id=\"hero-hp\" className=\"d-flex\">\n              <div className=\"ml-auto mr-3\">\n                <h5>\n                  {this.props.playerHP}/{this.props.playerMaxHP}\n                </h5>\n              </div>\n            </div>\n          </div>\n          {/* END HERO POKEMON INFO BOX */}\n        </div>\n        {/* END HERO POKEMON CONTAINER */}\n      </div>\n    );\n  }\n}\n\nexport default PlayerBox;\n","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nclass PlayAgain extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"battle-text-content\">\r\n        <p id=\"play-again-text\" onClick={() => this.props.handlePlayAgain()}>\r\n          Clique ici pour recommencer une partie\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPlayAgain.propTypes = {\r\n  handlePlayAgain: PropTypes.func,\r\n}\r\n\r\nexport default PlayAgain;\r\n","import React, { Component } from 'react';\nimport \"./animate.css\";\nimport \"./bootstrap.css\";\nimport \"./App.css\";\nimport TextBox from \"./Components/TextBox\";\nimport Attacks from \"./Components/Attacks\";\nimport EnemyBox from \"./Components/EnemyBox\";\nimport PlayerBox from \"./Components/PlayerBox\";\nimport PlayAgain from \"./Components/PlayAgain\";\n\nclass App extends Component {\n  state = {\n    playerName: \"Pikachu\",\n    playerLevel: 45,\n    playerHP: 200,\n    playerMaxHP: 200,\n    playerAttacks: {\n      attackOne: { name: \"Morsure\", damage: 10, cost: 0 },\n      attackTwo: { name: \"Eclair\", damage: 30, cost: 10 },\n      attackThree: { name: \"Tonnerre\", damage: 35, cost: 20 },\n      attackFour: { name: \"Méga éclair\", damage: 45, cost: 30 }\n    },\n    playerFaint: undefined,\n    enemyName: \"Mewtwo\",\n    enemyLevel: 43,\n    enemyHP: 200,\n    enemyMaxHP: 200,\n    enemyAttackNames: [\"Frappe\", \"Balle de l'ombre\", \"Rêve éveillé\", \"Cauchemard\"],\n    enemyAttackDamage: [10, 30, 35, 45],\n    enemyFaint: undefined,\n    textMessageOne: \" \",\n    textMessageTwo: \"\",\n    gameOver: false\n  };\n\n  componentDidMount() {\n    this.startingSequence();\n  }\n\n  startingSequence = () => {\n    setTimeout(() => {\n      this.setState(\n        () => {\n          return {\n            textMessageOne: `${this.state.enemyName} apparait!`,\n            enemyFaint: false\n          };\n        },\n        () => {\n          setTimeout(() => {\n            this.setState(\n              {\n                textMessageOne: `Go ${this.state.playerName}!`,\n                playerFaint: false\n              },\n              () => {\n                setTimeout(() => {\n                  this.setState({\n                    textMessageOne: \"\"\n                  });\n                }, 3000);\n              }\n            );\n          }, 3000);\n        }\n      );\n    }, 1000);\n  };\n\n  enemyTurn = (enemyAttackName, enemyAttackDamage) => {\n    enemyAttackDamage = enemyAttackDamage + Math.floor(Math.random() * 11);\n    // first, check if enemy fainted. End Game if they did.\n    if (this.state.enemyHP === 0) {\n      this.setState(\n        {\n          textMessageOne: `${this.state.enemyName} a perdu.`,\n          textMessageTwo: `${this.state.playerName} a gagné!`,\n          enemyFaint: true\n        },\n        () => {\n          setTimeout(() => {\n            this.setState({\n              gameOver: true\n            });\n          }, 3000);\n        }\n      );\n    } else {\n      // if enemy is still alive, proceed with enemy turn\n\n      this.setState(\n        prevState => {\n          if (prevState.playerHP - enemyAttackDamage <= 0) {\n            return {\n              playerHP: 0,\n              textMessageOne: `${\n                this.state.enemyName\n              } utilise ${enemyAttackName} pour ${enemyAttackDamage}pts de dégats!`\n            };\n          } else {\n            return {\n              playerHP: prevState.playerHP - enemyAttackDamage,\n              textMessageOne: `${\n                this.state.enemyName\n              } utilise ${enemyAttackName} pour ${enemyAttackDamage}pts de dégats!`\n            };\n          }\n        },\n        () => {\n          setTimeout(() => {\n            if (this.state.playerHP === 0) {\n              this.setState(\n                {\n                  textMessageOne: `${this.state.playerName} a perdu.`,\n                  textMessageTwo: `${this.state.enemyName} a gagné!`,\n                  playerFaint: true\n                },\n                () => {\n                  setTimeout(() => {\n                    this.setState({\n                      gameOver: true\n                    });\n                  }, 3000);\n                }\n              );\n            } else {\n              this.setState({\n                textMessageOne: \"\"\n              });\n            }\n          }, 2000);\n        }\n      );\n    }\n  };\n\n  handleAttackClick = (name, damage) => {\n    // implicit return single value\n    // this.setState(prevState => ({\n    //   enemyHP: prevState.enemyHP - damage\n    // }));\n\n    damage = damage + Math.floor(Math.random() * 11);\n\n    // use attack to calculate enemy HP and adjust progress bar\n    this.setState(\n      prevState => {\n        if (prevState.enemyHP - damage <= 0) {\n          return {\n            enemyHP: 0,\n            textMessageOne: `${\n              this.state.playerName\n            } utilise ${name} pour ${damage}pts de dégats!`\n          };\n        } else {\n          return {\n            enemyHP: prevState.enemyHP - damage,\n            textMessageOne: `${\n              this.state.playerName\n            } utilise ${name} pour ${damage}pts de dégats!`\n          };\n        }\n      },\n      () => {\n        // wait X seconds before enemy attacks\n        setTimeout(() => {\n          // calc next enemy attack name and damage\n          let enemyAttack = Math.floor(Math.random() * 4);\n          let enemyAttackDamage = this.state.enemyAttackDamage[enemyAttack];\n          let enemyAttackName = this.state.enemyAttackNames[enemyAttack];\n\n          // once the state is changed, start enemy turn\n          this.enemyTurn(enemyAttackName, enemyAttackDamage);\n        }, 3000);\n      }\n    );\n  };\n\n  handlePlayAgain = () => {\n    this.setState({\n      playerHP: this.state.playerMaxHP,\n      enemyHP: this.state.enemyMaxHP,\n      gameOver: false,\n      textMessageOne: \"\",\n      textMessageTwo: \"\",\n      enemyFaint: false,\n      playerFaint: false\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"container h-100\">\n        <div className=\"row row h-100 justify-content-center align-items-center\">\n          <div className=\"col-sm-12\">\n            {/* BATTLE SCREEN CONTAINER */}\n            <div id=\"battle-container\" className=\"px-2 mx-auto\">\n              <EnemyBox\n                enemyName={this.state.enemyName}\n                enemyLevel={this.state.enemyLevel}\n                enemyHP={this.state.enemyHP}\n                enemyMaxHP={this.state.enemyMaxHP}\n                enemyFaint={this.state.enemyFaint}\n              />\n\n              <PlayerBox\n                playerName={this.state.playerName}\n                playerLevel={this.state.playerLevel}\n                playerHP={this.state.playerHP}\n                playerMaxHP={this.state.playerMaxHP}\n                playerFaint={this.state.playerFaint}\n              />\n\n              {/* TEXT BOX SECTION */}\n              <div id=\"text-box\">\n                <div id=\"text-box-content\">\n                  {this.state.textMessageOne !== \"\" &&\n                  this.state.gameOver === false && (\n                    <TextBox\n                      messageOne={this.state.textMessageOne}\n                      messageTwo={this.state.textMessageTwo}\n                    />\n                  )}\n\n                  {this.state.textMessageOne === \"\" &&\n                  this.state.gameOver === false &&\n                  Object.keys(this.state.playerAttacks).map((key, index) => {\n                    return (\n                      <Attacks\n                        key={key}\n                        index={index}\n                        details={this.state.playerAttacks[key]}\n                        handleAttackClick={this.handleAttackClick}\n                      />\n                    );\n                  })}\n\n                  {this.state.gameOver === true && (\n                    <PlayAgain handlePlayAgain={this.handlePlayAgain} />\n                  )}\n                </div>\n              </div>\n              {/* END TEXT BOX SECTION */}\n            </div>\n            {/* END BATTLE SCREEN CONTAINER */}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}